apply plugin: 'java'
apply plugin: 'maven'

apply from: 'mavenPublish.gradle'
apply from: 'javafx.plugin'

group = 'org.controlsfx'
version = '8.0.2-SNAPSHOT'

configurations {
    samples.extendsFrom mainRuntime
    jdk
}

sourceSets {
    main {
        compileClasspath += configurations.jdk
    }
    samples {
        java {
            compileClasspath += main.output
            compileClasspath += configurations.jdk
            runtimeClasspath += main.output
            runtimeClasspath += configurations.jdk
            runtimeClasspath += javadocJar.output
        }
    }
}

dependencies {
    try {
        jdk files(jfxrtJar)
    } catch (MissingPropertyException pne) {
        jdk files("${System.properties['java.home']}/lib/jfxrt.jar")
        jdk files("${System.properties['java.home']}/lib/ext/jfxrt.jar")
    }
}

javadoc {
    exclude 'impl/*'
    failOnError = false
    classpath = project.sourceSets.main.runtimeClasspath + configurations.jdk
    
    options.windowTitle("ControlsFX Project ${version}")
    options.links("http://download.oracle.com/javase/7/docs/api/");
    options.links("http://docs.oracle.com/javafx/2/api/");
    options.addBooleanOption("Xdoclint:none").setValue(true);
    options.overview("src/main/docs/overview.html");
    
    // All doc-files are located in src/main/docs because Gradle's javadoc doesn't copy
    // over the doc-files if they are embedded with the sources. I find this arrangement
    // somewhat cleaner anyway (never was a fan of mixing javadoc files with the sources)
    doLast {
        copy {
            from "src/main/docs"
            into "$buildDir/docs/javadoc"
        }
    }
}

jar {
    //exclude '**/16/*'
    exclude '**/32/*'
    exclude '**/64/*'
    exclude '**/128/*'
    exclude '**/oxygen/svg/*'
}

task jarSamples (type: Jar) {
    classifier='samples'
    from sourceSets.samples.output
    manifest {
        attributes(
            'Manifest-Version': '1.0',
            "Main-Class": "org.controlsfx.HelloControlsFX",
            "Class-Path": "controlsfx-${version}.jar"
        )
    }
}

task sourceJar(type: Jar) {
    from sourceSets.main.java
    from sourceSets.main.resources
    classifier = 'sources'
}

task javadocJar(type: Jar) {
    dependsOn javadoc
    from javadoc.destinationDir
    classifier = 'javadoc'
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.6'
}

artifacts {
    archives sourceJar
    archives javadocJar
    archives jarSamples
}

['HelloControlsFX'/*, 'HelloGridView', 'HelloRangeSlider', 'HelloRating', 'HelloSegmentedButton', 'HelloToggleSwitch', 'SVGTest'*/].each { name ->
    task "$name" (type: JavaExec) {
        main = "org.controlsfx.$name"
        classpath = sourceSets.samples.runtimeClasspath + sourceSets.main.runtimeClasspath + configurations.jdk
    }
}

// enumerate the samples at build time
task enumerateSamples() {
    doLast {
        def samplesList = []
        sourceSets.samples.java.visit {
            if (!it.directory && it.file.text.contains(' implements Sample ') && it.path.contains("samples")) {
                samplesList += it.path
            }
        }
        File outputFile = new File(sourceSets.samples.output.resourcesDir, 'org/controlsfx/samples/samples.txt')
        outputFile.parentFile.mkdirs()
        outputFile.text = samplesList.join('\n')
    }
}
processSamplesResources.dependsOn(enumerateSamples)
gradle.taskGraph.whenReady {
    enumerateSamples.enabled = gradle.taskGraph.hasTask(":jfxDeploy") 
}



javafx {

    try {
        jfxrtJar = ext.jfxrtJar
    } catch (MissingPropertyException pne) {
        // ignore
    }
    
    sourceSet = 'samples'

    appID 'HelloControlsFX'
    appName 'Hello ControlsFX'
    mainClass 'org.controlsfx.HelloControlsFX'

    javaRuntime = '<NO RUNTIME>' // for now don't bundle a VM

    // deplpy/info attributes
    category = 'JavaFX Demos'
    copyright = 'Copyright (c) 2013 Jonathan Giles and others'
    description = 'This is a sample of all of the ControlsFX controls'
    licenseType = '3 clause BSD'
    vendor = 'FX Experience'

}
