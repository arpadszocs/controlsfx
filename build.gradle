apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'application'

apply from: 'mavenPublish.gradle'
apply from: 'javafx.plugin'

group = 'org.controlsfx'
version = '8.0.3-SNAPSHOT'

applicationName = 'FXSampler'
mainClassName = "fxsampler.FXSampler"
sourceCompatibility = '1.8'
targetCompatibility = '1.8'

configurations {
    samples {extendsFrom mainRuntime}
    jdk
}

sourceSets {
    main {
        compileClasspath += configurations.jdk
    }
    samples {
        java {
            compileClasspath += main.output
            compileClasspath += configurations.jdk
            compileClasspath += configurations.compile
            runtimeClasspath += samples.output
            runtimeClasspath += main.output
            runtimeClasspath += configurations.jdk
            runtimeClasspath += javadocJar.output
            runtimeClasspath += configurations.runtime
        }
    }
}

dependencies {
    samplesCompile "fxsampler:fxsampler:1.0.0-SNAPSHOT"
    
    try {
        jdk files(jfxrtJar)
    } catch (MissingPropertyException pne) {
        // javafx plugin will provide in this case
    }
}

// Samples should be on the class path to run FXSampler
run {
  classpath += sourceSets.samples.output
}

javadoc {
    exclude 'impl/*'
    failOnError = false
    classpath = project.sourceSets.main.runtimeClasspath + configurations.jdk
    
    options.windowTitle("ControlsFX Project ${version}")
    options.links("http://download.oracle.com/javase/7/docs/api/");
    options.links("http://docs.oracle.com/javafx/2/api/");
    options.addBooleanOption("Xdoclint:none").setValue(true);
    options.overview("src/main/docs/overview.html");
    
    // All doc-files are located in src/main/docs because Gradle's javadoc doesn't copy
    // over the doc-files if they are embedded with the sources. I find this arrangement
    // somewhat cleaner anyway (never was a fan of mixing javadoc files with the sources)
    doLast {
        copy {
            from "src/main/docs"
            into "$buildDir/docs/javadoc"
        }
    }
}

jar {
    //exclude '**/16/*'
    exclude '**/32/*'
    exclude '**/64/*'
    exclude '**/128/*'
    exclude '**/oxygen/svg/*'
}

task samplesJar (type: Jar) {
    classifier='samples'
    from sourceSets.samples.output
//    manifest {
//        attributes(
//            'Manifest-Version': '1.0',
//        )
//    }
}

task sourceJar(type: Jar) {
    from sourceSets.main.java
    from sourceSets.main.resources
    classifier = 'sources'
}

task javadocJar(type: Jar) {
    dependsOn javadoc
    from javadoc.destinationDir
    classifier = 'javadoc'
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.8'
}

artifacts {
    archives sourceJar
    archives javadocJar
    archives samplesJar
}

// enumerate the samples at build time
task enumerateSamples() {
    doLast {
        def samplesList = []
        sourceSets.samples.java.visit {
            // could be improved:  we could load the class and check the hierarchy
            if (!it.directory && it.file.text.contains(' extends SampleBase ') && it.path.contains("samples")) {
                samplesList += it.path
            }
        }
        File outputFile = new File(sourceSets.samples.output.resourcesDir, 'fxsampler/samples/samples.txt')
        outputFile.parentFile.mkdirs()
        outputFile.text = samplesList.join('\n')
    }
}
processSamplesResources.dependsOn(enumerateSamples)
gradle.taskGraph.whenReady {
    enumerateSamples.enabled = gradle.taskGraph.hasTask(":jfxDeploy") 
}


jfxJar {
    classpath = files(
        (project.sourceSets.samples.compileClasspath .files
            - project.configurations['providedCompile'].files.findAll {it.file}) 
        + jar.archivePath            
    )
}

javafx {
    try {
        jfxrtJar = ext.jfxrtJar
    } catch (MissingPropertyException pne) {
        // ignore
    }
    
    sourceSet = 'samples'

    appID 'HelloControlsFX'
    appName 'Hello ControlsFX'
    mainClass 'fxsampler.FXSampler'

    javaRuntime = '<NO RUNTIME>' // for now don't bundle a VM

    // deplpy/info attributes
    category = 'JavaFX Demos'
    copyright = 'Copyright (c) 2013 Jonathan Giles and others'
    description = 'This is a sample of all of the ControlsFX controls'
    licenseType = '3 clause BSD'
    vendor = 'FX Experience'
}
